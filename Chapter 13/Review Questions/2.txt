Because n(n-1) / 2 = n^2 / 2 - n / 2. For large n the second term is small compared to the first. Then the / 2 part of the first term is dropped because it does not change with the input size (it is a constant). So when comparing algorithms which is the purpose of Big Oh, it will not make a difference because the same / 2 term applies to both of the algorithms. Therefore the only considered term is n^2 and thus is O(n^2).
